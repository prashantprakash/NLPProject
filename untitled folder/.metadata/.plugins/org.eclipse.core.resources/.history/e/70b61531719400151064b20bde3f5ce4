import java.io.File;
import java.util.HashMap;
import java.util.Scanner;

/*
 * @Author : Prashant Prakash
 * @Email Id : pxp141730@utdallas.edu
 * @Created Date : 26th Nov 2015 
 * This class has Laplace add one smoothening Technique to store the counts 
 */

public class HMMParser {
	/* Variables initialization to hold references 	
	 */
	Scanner sc ;
	HashMap<String, Integer> tagCounts = new HashMap<String,Integer>();
	HashMap<String, HashMap<String,Integer>> wordCounts = new HashMap<String,HashMap<String,Integer>>();
	HashMap<String, HashMap<String, Integer>> tagBigramCounts = new HashMap<String, HashMap<String,Integer>>();
    HashMap<String, HashMap<String, Integer>> tagForWordCounts = new HashMap<String, HashMap<String, Integer>>();
    String mostFreqTag = "";
    int mostFreqTagCount = 0;
    int numTrainingBigrams = 0;
    
	
	
	/*
	 * Constructor to initialize  
	 */
	public HMMParser(String inputFileName) {
		File file = new File(inputFileName);
		try{
			sc = new Scanner(inputFileName);
		}catch(Exception ex) {
		  System.err.println("Error in reading file " + inputFileName);
		  ex.printStackTrace();
		}
	}
	
	/*
	 * function to parse file and store results  
	 */
	
	public void parseTrainer() {
		String prevTag = sc.next();
		sc.next();
		
		while(sc.hasNext()) {
			String currentTag = sc.next();
			String currentWord = sc.next();
			
			
			
		}
	}
	
	
	public void addOne(HashMap<String,Integer> map , String keya) {
		if(map.containsKey(keya)) {
			int tempCount = map.get(keya);
			map.put(keya, tempCount + Constant.ONE);
		} else {
			map.put(keya, Constant.ONE);
		}
	}
	
	
	
}
